*aref_web.txt*	要約

Author : aiya000
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
目次						*aref_web-contents*

概要				|aref_web-introduction|
使い方				|aref_web-usage|
インターフェイス		|aref_web-interface|
  変数				  |aref_web-variables|
  コマンド			  |aref_web-commands|
  キーマッピング		  |aref_web-key-mappings|
  関数				  |aref_web-functions|
TODO				|aref_web-todo|
更新履歴			|aref_web-changelog|


==============================================================================
概要						*aref_web-introduction*

　 *aref-web.vim* は Weblio辞書などのWeb辞書や
HaskellのStackage検索を
非同期的にVimから開くことができます。

thinca氏のref.vim ( https://github.com/thinca/vim-ref/ ) を
リスペクトしています。

最新版:
https://github.com/user/aref-web.vim.vim


==============================================================================
使い方						*aref_web-usage*

例
  .vimrcに以下を記述します。

    let g:aref_web_source = {
    \  'weblio' : {
    \    'url' : 'http://ejje.weblio.jp/content/%s'
    \  },
    \  'stackage' : {
    \    'url' : 'https://www.stackage.org/lts-5.15/hoogle?q=%s'
    \  }
    \}

  以下のコマンドで、単語「implement」を検索します。
検索結果はページの読み込みが完了した時点でバッファで開かれます。
    :Aref weblio implement

  以下のコマンドでstackageから型「Int -> Int」を持つ関数を検索します。
    :Aref stackage Int -> Int

==============================================================================
インターフェイス				*aref_web-interface*

------------------------------------------------------------------------------
変数						*aref_web-variables*

g:aref_web_source				*g:aref_web_source*
	This type is dictionary .

	既定値: {}
	設定例:
	let g:aref_web_source = {
	\  'weblio' : {
	\    'url' : 'http://ejje.weblio.jp/content/%s'
	\  },
	\  'stackage' : {
	\    'url' : 'https://www.stackage.org/lts-5.15/hoogle?q=%s'
	\  }
	\}

　検索に使うソース名とURLを記述します。

例えば、設定例をvimrcに記述した後に以下のコマンドを実行すると
    :Aref weblio implement
以下のURLのWebページを取得しに行きます。
    http://ejje.weblio.jp/content/implement

以下のコマンドを実行すると
    :Aref stackage Int -> Int
以下のURLのWebページを取得しに行きます。
    https://www.stackage.org/lts-5.15/hoogle?q=Int+->+Int
stackage以降の引数が+で結合され、%sに挿入されています。
(ただし、実際にはparameterはパーセントエンコーディングされます)


g:aref_web_dump_cmd				*g:aref_web_dump_cmd*
	This type is string .

	規定値: $PATHに入っている以下のCUI browserのいずれか
	(上に記述されたものの方が優先度が高い)
		- w3m
		- elinks
		- links
	設定例: 'w3m -dump %s'

　|g:aref_web_source|の内容を取得する際に使用されます。
簡易例: $ curl http://ejje.weblio.jp/content/foo_word -o tempname.html
        $ w3m -dump tempname.html
        ==> to vim buffer.


g:aref_web_enable_default_keymappings	*g:aref_web_enable_default_keymappings*
	This type is boolean .
	既定値: v:true

	　この変数値がv:trueであれば、aref_webバッファを開いた際に
	規定のキーマッピングが自動で実行されます。
	　v:falseであれば、キーマッピングは自動で実行されません。

g:aref_web_split_vertically			*g:aref_web_split_vertically*
	This type is boolean .
	既定値: v:false

	　この変数値がv:trueであれば、aref_webバッファを開いた際に
	左側にバッファを開きます。
	そうでなければ、上側にバッファを開きます。

------------------------------------------------------------------------------
コマンド					*aref_web-commands*

:Aref {source} {argments}				*:Aref*

　{source}には|g:aref_web_source|の要素のキー名を指定します。
{arguments}には|g:aref_web_source|の要素の値に対する引数を指定します。

詳しくは |aref-web.vim-variables| を参照。


:ArefOpenBrowser 				*:ArefOpenBrowser*
　現在のバッファの'filetype'が aref_web である場合に、
そこで開かれているWebページを規定のブラウザで開きます。
　ここでは|open-broser.vim|が使用され、「規定のブラウザ」は
|open-broser.vim|によって選択されます。

　このコマンドは|open-broser.vim|がVimにロードされていない場合は
機能しません。


------------------------------------------------------------------------------
キーマッピング					*aref_web-key-mappings*

				*<Plug>(aref_web_open_browser_current_url)*
<Plug>(aref_web_open_browser_current_url)
	有効モード: normal mode

|:ArefOpenBrowser|の関数版。


<Plug>(aref_web_show_next_page)		*<Plug>(aref_web_show_next_page)*
	有効モード: normal mode

　もし 'https://www.stackage.org/lts-6.6/hoogle?q=Int+->+Int&page=1'
のように、 URLの整数型のクエリ文字列があれば
'https://www.stackage.org/lts-6.6/hoogle?q=Int+->+Int&page=2'
のような、末尾のクエリ文字列の整数値を +1 したURLを
現在のaref_webバッファに (非同期的に) 読み込みます。


<Plug>(aref_web_show_prev_page)		*<Plug>(aref_web_show_prev_page)*
	有効モード: normal mode

|<Plug>(aref_web_show_next_page)|と似たような動作をしますが、
こちらは、その整数値を -1 したURLを (非同期に) 読み込みます。


						*aref_web-default-key-mappings*

Normal mode default key mappings for filetype=aref_web buffer.
{lhs}		{rhs}
--------	------------------------
<C-a>		<Plug>(aref_web_show_next_page)
<C-x>		<Plug>(aref_web_show_prev_page)
O		<Plug>(aref_web_open_browser_current_url)


------------------------------------------------------------------------------
関数						*aref_web-functions*

aref_web#open_webpage({...})			*aref_web#open_webpage()*

|:Aref|の関数版。


aref_web#show_next_page()			*aref_web#show_next_page()*

|<Plug>(aref_web_show_next_page)|の関数版。


aref_web#show_prev_page()			*aref_web#show_prev_page()*

|<Plug>(aref_web_show_prev_page)|の関数版。


aref_web#open_browser()				*aref_web#open_browser()*

|:ArefOpenBrowser|の関数版。


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
